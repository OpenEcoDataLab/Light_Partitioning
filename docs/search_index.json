[["index.html", "Light partitioning Part 1 Tiny intro 1.1 Workflow", " Light partitioning Dr. Matthew Ross Dr. Jim Jawitz Dr. Matt Cohen January 14, 2022 Part 1 Tiny intro Water clarity and its components (chlorophyll a, total suspended sediment, and dissolved organic carbon) are among the most functionally important and socially-relevant aspects of water quality. Here we propose a method for systematically evaluating the relative contribution of each water clarity component to total clarity. We further borrow a visualization tool from soil analyses, the ternary diagram. We build ternary diagrams that partition light partitioning between DOC, algal cells, and non-algal particles. 1.1 Workflow In its simplest form our workflow is: Download all of AquaSat and join disparate AquaSat pieces together Investigate the relationship between chl-a, tis (inorganic sediment), non-algal particles (dead particles), and algae biomass to build a dataset of algal biomass, non-algal particle mass, and dissolved organic carbon mass. Investigate data quality of AquaSat and select a subset of data where chl-a, doc, tss, and secchi were all measured simultaneously Build a model that predicts light extinction (1.4/secchi) using algal particles, non-algal particles, and doc. Use this model to extract light extinction coefficients for each parameter, apply this model to visualizations in ternary space Explore systematic controls on relative contribution to light extinction over space and time across CONUS. "],["download-and-join.html", "Part 2 Download and Join 2.1 AquaSat download 2.2 AquaSat Read and join. 2.3 Data Eval and Subset 2.4 Where are sites with simultaneous observations of clarity constituents? 2.5 What is the general relationiship between variables in log log space", " Part 2 Download and Join I recognize that I should probably just use targets for this part, but I (Matt Ross) dont know how to use targets yet! So, instead we are just going to have several code chunks here that just downloads all the data directly from figshare, preps data for analysis, etc and the chunks will just be set to eval = FALSE, so they wont run unless you manually run it. That way this book can run in reasonable timeframes, most other chunks will run based on caching. Though, some data intensive tasks, will also simply have eval = F to save runtime. These chunks will be flagged explicitly, and all their data products saved to a data/out folder. 2.1 AquaSat download AquaSat is held in a figshare collection with many pieces. For this work we will need most of the data held there, which we will access through direct download. The URLs are just from the AquaSat collection links. ## AquaSat Download data. This takes &gt; 2 hours, ## so only run if you think ## AquaSat has been updated! ## Also ## In-situ raw data with methods download.file(&#39;https://figshare.com/ndownloader/files/15475154&#39;, mode = &#39;wb&#39;,# Needs to be written in binary for some reason destfile = &#39;data/in/aq_situ.zip&#39;) unzip(&#39;data/in/aq_situ.zip&#39;,exdir = &#39;data/in/aq_situ&#39;) # Site Inventory with type, because it&#39;s not in the other inventory # Stupid aquasat developer (me/mattross!) download.file(&#39;https://figshare.com/ndownloader/files/24720434&#39;, mode = &#39;wb&#39;, destfile = &#39;data/in/inv.feather&#39;) ## Unique site inventory download.file(&#39;https://figshare.com/ndownloader/files/24720437&#39;, mode = &#39;wb&#39;, destfile = &#39;data/in/unq_site.feather&#39;) ## Ecoregion data download.file(&#39;https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/cec_na/na_cec_eco_l2.zip&#39;, destfile = &#39;data/in/eco2.zip&#39;) unzip(&#39;data/in/eco2.zip&#39;,exdir = &#39;data/in/ecoregion&#39;) 2.2 AquaSat Read and join. Note, also eval = F to save computation time library(tidyverse) library(sf) library(feather) library(GGally) library(mapview) # This is only useful because it has type (lake/stream/etc...) inv_type &lt;- read_feather(&#39;data/in/inv.feather&#39;) %&gt;% select(SiteID = MonitoringLocationIdentifier, type = ResolvedMonitoringLocationTypeName) %&gt;% mutate(type = ifelse(grepl(&#39;Lake&#39;,type),&#39;Lake&#39;,type)) #Real inventory site.vis &lt;- read_feather(&#39;data/in/unq_site.feather&#39;) %&gt;% inner_join(inv_type) %&gt;% distinct(SiteID,lat,long,type) # Complete in-situ data, 6.5 million records. in.vis &lt;- read_csv(&#39;data/in/aq_situ/in-situ/wqp_lagos_unity.csv&#39;) 2.3 Data Eval and Subset 2.3.1 Selecting only simultaneous observations I think the code mostly speaks for itself here # Only bother with data that has complete simultaneous observations of # chl_a, doc, etc... simul_vis &lt;- in.vis %&gt;% select(-p_sand) %&gt;% filter(across(c(chl_a,doc,secchi,tss), ~!is.na(.))) %&gt;% inner_join(site.vis) %&gt;% filter(type != &#39;Facility&#39;) %&gt;% #Set some reasonable thresholds, AquaSat is too generous filter(secchi &lt; 15, chl_a &lt; 1000,## ug/L tss &lt; 1000, ## mg/L doc &lt; 50) # For speed write_feather(simul_vis, &#39;data/out/simul.feather&#39;) #For reproducibility write_csv(simul_vis, &#39;data/out/simul.csv&#39;) 2.4 Where are sites with simultaneous observations of clarity constituents? simul_vis &lt;- read_csv(&#39;data/out/simul.csv&#39;) ## Rows: 100823 Columns: 12 ## -- Column specification ----------------------------------------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (3): SiteID, source, type ## dbl (7): chl_a, doc, secchi, tis, tss, lat, long ## lgl (1): date_only ## dttm (1): date_unity ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. unique_simul &lt;- simul_vis %&gt;% distinct(SiteID, lat, long, type) %&gt;% st_as_sf(.,coords = c(&#39;long&#39;,&#39;lat&#39;), crs = 4326) mapviewOptions(fgb = FALSE) # remove flat geobuff which breaks display mapview(unique_simul, zcol = &#39;type&#39;) 2.5 What is the general relationiship between variables in log log space log_simul &lt;- simul_vis %&gt;% dplyr::mutate(across(c(secchi,chl_a,tss,doc,tis),log10)) %&gt;% dplyr::filter(across(c(chl_a,doc,secchi,tss), ~!is.na(.) &amp; . &lt; Inf &amp; . &gt; -Inf)) log_simul %&gt;% sample_frac(0.2) %&gt;% ungroup() %&gt;% select(secchi,chl_a,tss,doc,type) %&gt;% ggpairs(lower = list(continuous = wrap(&#39;points&#39;,shape = 1)), diag = list(continuous = wrap(&#39;densityDiag&#39;, alpha = 0.5)), mapping = ggplot2::aes(color = type), columns = c(&#39;secchi&#39;,&#39;chl_a&#39;,&#39;tss&#39;,&#39;doc&#39;)) + ggthemes::theme_few() + scale_color_manual(values = c(&#39;seagreen3&#39;,&#39;skyblue3&#39;,&#39;saddlebrown&#39;)) ## plot: [1,1] [====&gt;------------------------------------------------------------------------------] 6% est: 0s ## plot: [1,2] [=========&gt;-------------------------------------------------------------------------] 12% est: 1s ## plot: [1,3] [===============&gt;-------------------------------------------------------------------] 19% est: 1s ## plot: [1,4] [====================&gt;--------------------------------------------------------------] 25% est: 1s ## plot: [2,1] [=========================&gt;---------------------------------------------------------] 31% est: 1s ## plot: [2,2] [==============================&gt;----------------------------------------------------] 38% est: 1s ## plot: [2,3] [===================================&gt;-----------------------------------------------] 44% est: 1s ## plot: [2,4] [=========================================&gt;-----------------------------------------] 50% est: 1s ## plot: [3,1] [==============================================&gt;------------------------------------] 56% est: 1s ## plot: [3,2] [===================================================&gt;-------------------------------] 62% est: 0s ## plot: [3,3] [========================================================&gt;--------------------------] 69% est: 0s ## plot: [3,4] [=============================================================&gt;---------------------] 75% est: 0s ## plot: [4,1] [==================================================================&gt;----------------] 81% est: 0s ## plot: [4,2] [========================================================================&gt;----------] 88% est: 0s ## plot: [4,3] [=============================================================================&gt;-----] 94% est: 0s ## plot: [4,4] [===================================================================================]100% est: 0s "],["data-quality-assessments.html", "Part 3 Data quality assessments 3.1 Chl-a to biomass 3.2 Data-driven qa/qc", " Part 3 Data quality assessments Note, also eval = F to save computation time 3.1 Chl-a to biomass While it is more common in coastal and oceanic research, inland water scientists rarely measure water clarity constituents in the way that is most directly transferable to our research question. Ideally we would routinely measure concentrations of algae biomass, non-algal particles (including inorganic sediment and organic sediment, I like to call this stuff dead suspended sediment, but I guess NAP is fine), and dissolved organic carbon. These constituents all alter light penetration in water, but they are mutually exclusive groups with no measurement overlap between algal particles and NAP for example. However, this is not what we usually measure. Instead, we have rich datasets of things that could indicate our desired constituents. These map as basically. Chlorophyll-a -&gt; proxy for algae biomass. Total suspended solids (tss) -&gt; All suspended solids, subtract algae biomass = NAP DOC -&gt; DOC! That means we have to basically do one key calculation. Convert chl-a to biomass. Then subtract that from tss and assume that is NAP. While this is a absurdly simple calculation it is filled with dangers. The relationship between chl-a and algae biomass depends on temperature and nutrients and species and is not universal. Most studies focus on Chl:C ratios, but we are interested in Chl:Biomass ratio, for which there are much fewer studies, though some studies below suggest a range of 0.005 to 0.1 Chl:biomass. (I need to find the C:Biomass study I used forever ago.) Papers that help: https://aslopubs.onlinelibrary.wiley.com/doi/full/10.1002/lno.10338 https://pubs.usgs.gov/twri/twri9a7/twri9a7_7.4.pdf https://www.researchgate.net/publication/230056019_Relationship_between_Chlorophyll-a_Concentration_and_Phytoplankton_Biomass_in_Several_Reservoirs_in_Czechoslovakia/link/5cb56c164585156cd79af804/download 3.1.1 Approach Our philosphy here is that we will use chl-a directly as a proxy for algal biomass to minimize the number of transformations to this data, since we are primarily interested in how algae alters light attenuation, regardless of how we estimate algae. However, we still need to calculate Non-Algal Particle mass. For that we will use a range of values of Chl:biomass and show the impact of picking a variety of ranges. Caveats We dont have a true NAP to compare how accurate our approach is. We do have Inorganic Sediment, but that is not the same thing as non-algal particles, since it excludes particulate organic carbon. Still, where we have it, we will examine the relationship between NAP and TIS (total inorganic sediment). Not entirely sure how we propogate this uncertainty downstream? Pick an average? in_vis &lt;- read_feather(&#39;data/out/simul.feather&#39;) range &lt;- c(1/0.005, 1/0.01, 1/0.05,1/0.1) #Couldn&#39;t think of a more clever way to multiply #chl_a by the range of values, so just made # dataframe 4 times bigger with new column called ratio. nap_test &lt;- expand_grid(in_vis,chl_ratio = range) %&gt;% mutate(chl_a_biomass = (chl_a/1000)*chl_ratio, tss_dead = tss-chl_a_biomass) 3.1.2 Simple evaluations of conversion 3.1.2.1 Negative tss_dead Probably the simplest way to see which ratios are more appropriate is to look at how that impacts how many tss_dead observations are negative (impossible). nap_test %&gt;% mutate(negative = ifelse(tss_dead &lt; 0, &#39;neg&#39;, &#39;pos&#39;)) %&gt;% group_by(negative,chl_ratio) %&gt;% count() %&gt;% pivot_wider(names_from = &#39;negative&#39;,values_from = &#39;n&#39;) %&gt;% mutate(percent_neg = neg/(pos+neg)*100) %&gt;% knitr::kable() chl_ratio neg pos percent_neg 10 4 100819 0.0039673 20 33 100790 0.0327306 100 955 99868 0.9472045 200 5125 95698 5.0831655 Well, that sort of produces obvious results. Smaller ratios mean, less negative NAP estimates, but there is a big increase between 100-200, making me think the correct ratio may be in there somewhere. 3.1.2.2 Relationship between chl-a and tss_dead If you recall from the previous section, there was a strong linear relationship between chl-a and tss across all sites and water types (r2 &gt; 0.35). One effect wed expect to see with the tss_dead estimate is that this relationship should decay. While there are reasons for chl-a to be correlated with tss (sediment brings nutrients for example), chl-a also includes algal cells which are suspended particles themselves. If this approach worked well, we should see weaker relationships between tss_dead and chl-a #Subset for plotting purposes nap_test %&gt;% #Remove negatives and very small numbers (ug/L of sediment is basically zero) filter(tss_dead &gt; 0.001) %&gt;% sample_frac(0.1) %&gt;% ggplot(., aes(chl_a,tss_dead,color = type)) + facet_wrap(~chl_ratio) + geom_point() + scale_x_log10() + scale_y_log10() + stat_poly_eq() + ggthemes::theme_few() + scale_color_manual(values = c(&#39;seagreen3&#39;,&#39;skyblue3&#39;,&#39;saddlebrown&#39;)) Figure 3.1: At low chl_ratios (10/20), there is really no change to the correlation between tss and chl_a, but at higher ratios (100/200), the relationship does breakdown some, though not completely What to do with this? I prefer just 100 going forward. Mostly goldilocks preference tho 3.2 Data-driven qa/qc We know that data in the water quality portal (and therfore in aquasat) comes with inherent biases and problems that are a natural part of aggregated massive datasets like the WQP. So how do we evaluate data quality in this context? Here we assume that some answers about data quality can be found in the original WQP data context including analytical and field methods data as well as information about which organizations collected the sample. The sketchy part? We dont have a systematic way to understand if data is unreliable except for The contributions of each our constituents to clarity should be limited by physical limits of how light interacts with particles, algae, and DOC. So if we build a model of light extinction as a function of f(doc, chl_a, tss_dead), the worst residuals on that model, might inform data quality. Then we can subset data to only include data of the highest quality. 3.2.1 Extracting methods AquaSat chose (I) to remove methods info from the raw wqp data, but we kept it in a second file that we already downloaded. We just need to manipulate that data to play nice with our simultaneous observation data. #This chunk is slow and therefore not run in bookdown. #get WQP methods for post-hoc investigation of errors simul_methods &lt;- data.table::fread(&#39;data/in/aq_situ/in-situ/wqp_long_with_methods.csv&#39;) %&gt;% dplyr::filter(SiteID %in% in_vis$SiteID) simul_methods_time_fix &lt;- simul_methods %&gt;% mutate(time = as.character(format(date_time, &#39;%H:%M:%S&#39;)), date_only=ifelse(is.na(date_time) | time == &#39;00:00:00&#39;,T,F), date_unity = ymd_hms(ifelse(date_only == T, paste(date,&#39;12:00:00&#39;), as.character(date_time)), tz=&#39;UTC&#39;)) %&gt;% mutate(time = as.character(format(date_unity, &#39;%H:%M:%S&#39;)), date_unity = ifelse(time == &#39;00:00:00&#39;, date_unity + hours(12), date_unity) %&gt;% #Convert back to poxict () as.POSIXct(.,origin=&#39;1970-01-01 00:00:00&#39;,tz=&#39;UTC&#39;)) %&gt;% #remove any time stamps that are NA filter(!is.na(date_unity)) %&gt;% filter(year(date_unity) &gt; 1900, year(date_unity) &lt;= year(Sys.Date())) %&gt;% #select(SiteID,date,characteristicName) %&gt;% as_tibble() %&gt;% dplyr::select(-date_only) %&gt;% mutate(harmonized_parameter = gsub(&#39;chl.a&#39;,&#39;chl_a&#39;,harmonized_parameter)) simul_vis_long &lt;- in_vis %&gt;% pivot_longer(cols = chl_a:tss,names_to = &#39;harmonized_parameter&#39;) simul_vis_methods &lt;- full_join(simul_methods_time_fix,simul_vis_long) #Fast feather::write_feather(simul_vis_methods, &#39;data/out/simul_methods.feather&#39;) # Reproducible write_csv(simul_vis_methods,&#39;data/out/simul_methods.csv&#39;) 3.2.2 Light attenuation model and residuals Model assumptions Not searching for intercept assuming observed 0.15 coefficient for intercept (pure water attenuation) For now, not doing the middle 2.5-97.5% of data, can add back in. Normality assumptions arent fully met nap_100 &lt;- nap_test %&gt;% filter(chl_ratio == 100, tss_dead &gt; 0.001) %&gt;% mutate(secchi = ifelse(secchi &lt; 0.01,0.01,secchi), kd = (1.4/(secchi))) k_w &lt;- 1/1.5/max(nap_100$secchi) kd_mod &lt;- lm((kd-k_w) ~ 0 +tss_dead + doc + chl_a, data = nap_100) nap_100$pred &lt;- predict(kd_mod,nap_100) + k_w nap_100$residuals &lt;- (nap_100$kd - nap_100$pred) nap_100 %&gt;% sample_frac(0.3) %&gt;% ggplot(., aes(kd,pred)) + geom_point(shape = 1) + ggthemes::theme_few() + xlab(&#39;kd (1.4/secchi)&#39;) + ylab(&#39;predicted kd&#39;) + scale_x_log10() + scale_y_log10() + stat_smooth(method = &#39;lm&#39;,se = F) + geom_abline(intercept = 0, slope = 1, col = &#39;red&#39;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 3.2: modelled light extinction coefficient versus observed, red line is 1:1 line and blue is line of best fit 3.2.3 Systematic problems? 3.2.3.1 Chl-a methods simul_vis_methods &lt;- feather::read_feather(&#39;data/out/simul_methods.feather&#39;) methods_summarizer &lt;- function(param = &#39;chl_a&#39;){ methods &lt;- simul_vis_methods %&gt;% filter(harmonized_parameter == param) %&gt;% inner_join(nap_100 %&gt;% select(SiteID,date_unity,residuals,pred,kd)) %&gt;% filter(!is.na(characteristicName)) method_plot &lt;- methods %&gt;% group_by(analytical_method) %&gt;% add_count() %&gt;% mutate(method_count = paste(&#39;n =&#39;,n,&#39;-&#39;,analytical_method)) %&gt;% ggplot(., aes(kd,pred,color = method_count)) + #geom_point(shape = 1) + ggthemes::theme_few() + xlab(&#39;kd (1.4/secchi)&#39;) + ylab(&#39;predicted kd&#39;) + scale_x_log10() + scale_y_log10() + stat_smooth(method = &#39;lm&#39;,se=F) + geom_abline(intercept = 0, slope = 1, col = &#39;black&#39;) method_error &lt;- methods %&gt;% group_by(analytical_method) %&gt;% summarize(rmse = rmse(kd,pred), n = n()) name_error &lt;- methods %&gt;% group_by(characteristicName) %&gt;% summarize(rmse = rmse(kd,pred), n = n()) name_plot &lt;- methods %&gt;% group_by(characteristicName) %&gt;% add_count() %&gt;% mutate(name_count = paste(&#39;n =&#39;,n,&#39;-&#39;,characteristicName)) %&gt;% ggplot(., aes(kd,pred,color = name_count)) + #geom_point(shape = 1) + ggthemes::theme_few() + xlab(&#39;kd (1.4/secchi)&#39;) + ylab(&#39;predicted kd&#39;) + scale_x_log10() + scale_y_log10() + stat_smooth(method = &#39;lm&#39;,se=F) + geom_abline(intercept = 0, slope = 1, col = &#39;black&#39;) return(list(method_error,name_error,method_plot,name_plot)) } chl_errors &lt;- methods_summarizer(&#39;chl_a&#39;) ## Joining, by = c(&quot;SiteID&quot;, &quot;date_unity&quot;) knitr::kable(chl_errors[[1]]) analytical_method rmse n 10200 H ~ Chlorophyll a-b-c Determination 1.9266312 24831 10200 H 2 ~ Chlorophyll a-b-c Determination by spectrophotometer 0.4049297 81 CHLOROPHYLL-A UG/L SPECTROPHOTOMETRIC ACID. METH. 0.4629188 48 Chlorophyll a-b-c- Determination 1.2748053 42 Chlorophyll a, phytoplankton 1.2370405 8 Chlorophyll a,phyto,fluorometric 4.5644898 227 Chlorophyll via HPLC / Spectrophotometer 4.4348321 3 Chlorophyll, phytoplankton, HPLC 2.3996726 318 FLUOROMETIC CHLOROPHYLL USING PROBE 0.5824996 184 FLUOROMETRIC; IN-VITRO CHLOROPHYLL A 0.5054935 41 In-Vitro Determination of Chlorophyll 2.4017753 14935 L01 1.9321800 386 L02 13.3706748 109 Laboratory Procedures for Water Quality Chemical Analysis 4.0442985 53 MONOCHROMATIC; SPECTROPHOTOMETRIC 3.3916554 36439 Pigments, algae, EPA445.0 w/ACTN 2.8380136 2 SM10200H 5.1510739 233 STANDARD METHOD FOR 10200 H 1.4953379 3 NA 2.7106937 17740 3.2.3.2 Chl-a names knitr::kable(chl_errors[[2]]) characteristicName rmse n Chlorophyll a 2.977341 79683 Chlorophyll a (probe relative fluorescence) 2.345192 30 Chlorophyll a (probe) 11.662752 13 Chlorophyll a, corrected for pheophytin 1.844879 15951 Chlorophyll a, free of pheophytin 3.205955 6 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
