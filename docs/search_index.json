[["index.html", "Light partitioning Part 1 Tiny intro 1.1 Workflow", " Light partitioning Dr. Matthew Ross Dr. Jim Jawitz Dr. Matt Cohen January 13, 2022 Part 1 Tiny intro Water clarity and its components (chlorophyll a, total suspended sediment, and dissolved organic carbon) are among the most functionally important and socially-relevant aspects of water quality. Here we propose a method for systematically evaluating the relative contribution of each water clarity component to total clarity. We further borrow a visualization tool from soil analyses, the ternary diagram. We build ternary diagrams that partition light partitioning between DOC, algal cells, and non-algal particles. 1.1 Workflow In its simplest form our workflow is: Download all of AquaSat and join disparate AquaSat pieces together Investigate the relationship between chl-a, tis (inorganic sediment), non-algal particles (dead particles), and algae biomass to build a dataset of algal biomass, non-algal particle mass, and dissolved organic carbon mass. Investigate data quality of AquaSat and select a subset of data where chl-a, doc, tss, and secchi were all measured simultaneously Build a model that predicts light extinction (1.4/secchi) using algal particles, non-algal particles, and doc. Use this model to extract light extinction coefficients for each parameter, apply this model to visualizations in ternary space Explore systematic controls on relative contribution to light extinction over space and time across CONUS. "],["download-and-join.html", "Part 2 Download and Join 2.1 AquaSat download 2.2 AquaSat Read and join. 2.3 Data Eval and Subset 2.4 Where are sites with simultaneous observations of clarity constituents? 2.5 What is the general relationiship between variables in log log space", " Part 2 Download and Join I recognize that I should probably just use targets for this part, but I (Matt Ross) dont know how to use targets yet! So, instead we are just going to have several code chunks here that just downloads all the data directly from figshare, preps data for analysis, etc and the chunks will just be set to eval = FALSE, so they wont run unless you manually run it. That way this book can run in reasonable timeframes, most other chunks will run based on caching. Though, some data intensive tasks, will also simply have eval = F to save runtime. These chunks will be flagged explicitly, and all their data products saved to a data/out folder. 2.1 AquaSat download AquaSat is held in a figshare collection with many pieces. For this work we will need most of the data held there, which we will access through direct download. The URLs are just from the AquaSat collection links. ## AquaSat Download data. This takes &gt; 2 hours, ## so only run if you think ## AquaSat has been updated! ## Also ## In-situ raw data with methods download.file(&#39;https://figshare.com/ndownloader/files/15475154&#39;, mode = &#39;wb&#39;,# Needs to be written in binary for some reason destfile = &#39;data/in/aq_situ.zip&#39;) unzip(&#39;data/in/aq_situ.zip&#39;,exdir = &#39;data/in/aq_situ&#39;) # Site Inventory with type, because it&#39;s not in the other inventory # Stupid aquasat developer (me/mattross!) download.file(&#39;https://figshare.com/ndownloader/files/24720434&#39;, mode = &#39;wb&#39;, destfile = &#39;data/in/inv.feather&#39;) ## Unique site inventory download.file(&#39;https://figshare.com/ndownloader/files/24720437&#39;, mode = &#39;wb&#39;, destfile = &#39;data/in/unq_site.feather&#39;) ## Ecoregion data download.file(&#39;https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/cec_na/na_cec_eco_l2.zip&#39;, destfile = &#39;data/in/eco2.zip&#39;) unzip(&#39;data/in/eco2.zip&#39;,exdir = &#39;data/in/ecoregion&#39;) 2.2 AquaSat Read and join. Note, also eval = F to save computation time library(tidyverse) library(sf) library(feather) library(GGally) library(mapview) # This is only useful because it has type (lake/stream/etc...) inv_type &lt;- read_feather(&#39;data/in/inv.feather&#39;) %&gt;% select(SiteID = MonitoringLocationIdentifier, type = ResolvedMonitoringLocationTypeName) %&gt;% mutate(type = ifelse(grepl(&#39;Lake&#39;,type),&#39;Lake&#39;,type)) #Real inventory site.vis &lt;- read_feather(&#39;data/in/unq_site.feather&#39;) %&gt;% inner_join(inv_type) %&gt;% distinct(SiteID,lat,long,type) # Complete in-situ data, 6.5 million records. in.vis &lt;- read_csv(&#39;data/in/aq_situ/in-situ/wqp_lagos_unity.csv&#39;) 2.3 Data Eval and Subset 2.3.1 Selecting only simultaneous observations I think the code mostly speaks for itself here # Only bother with data that has complete simultaneous observations of # chl_a, doc, etc... simul_vis &lt;- in.vis %&gt;% select(-p_sand) %&gt;% filter(across(c(chl_a,doc,secchi,tss), ~!is.na(.))) %&gt;% inner_join(site.vis) %&gt;% filter(type != &#39;Facility&#39;) %&gt;% #Set some reasonable thresholds, AquaSat is too generous filter(secchi &lt; 15, chl_a &lt; 1000,## ug/L tss &lt; 1000, ## mg/L doc &lt; 50) # write_csv(simul_vis, &#39;data/out/simul.csv&#39;) 2.4 Where are sites with simultaneous observations of clarity constituents? simul_vis &lt;- read_csv(&#39;data/out/simul.csv&#39;) ## Rows: 100823 Columns: 12 ## -- Column specification ----------------------------------------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (3): SiteID, source, type ## dbl (7): chl_a, doc, secchi, tis, tss, lat, long ## lgl (1): date_only ## dttm (1): date_unity ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. unique_simul &lt;- simul_vis %&gt;% distinct(SiteID, lat, long, type) %&gt;% st_as_sf(.,coords = c(&#39;long&#39;,&#39;lat&#39;), crs = 4326) mapviewOptions(fgb = FALSE) # remove flat geobuff which breaks display mapview(unique_simul, zcol = &#39;type&#39;) 2.5 What is the general relationiship between variables in log log space log_simul &lt;- simul_vis %&gt;% dplyr::mutate(across(c(secchi,chl_a,tss,doc,tis),log10)) %&gt;% dplyr::filter(across(c(chl_a,doc,secchi,tss), ~!is.na(.) &amp; . &lt; Inf &amp; . &gt; -Inf)) log_simul %&gt;% sample_frac(0.2) %&gt;% ungroup() %&gt;% select(secchi,chl_a,tss,doc,type) %&gt;% ggpairs(lower = list(continuous = wrap(&#39;points&#39;,shape = 1)), diag = list(continuous = wrap(&#39;densityDiag&#39;, alpha = 0.5)), mapping = ggplot2::aes(color = type), columns = c(&#39;secchi&#39;,&#39;chl_a&#39;,&#39;tss&#39;,&#39;doc&#39;)) + ggthemes::theme_few() + scale_color_manual(values = c(&#39;seagreen3&#39;,&#39;skyblue3&#39;,&#39;saddlebrown&#39;)) ## plot: [1,1] [====&gt;------------------------------------------------------------------------------] 6% est: 0s ## plot: [1,2] [=========&gt;-------------------------------------------------------------------------] 12% est: 1s ## plot: [1,3] [===============&gt;-------------------------------------------------------------------] 19% est: 1s ## plot: [1,4] [====================&gt;--------------------------------------------------------------] 25% est: 1s ## plot: [2,1] [=========================&gt;---------------------------------------------------------] 31% est: 1s ## plot: [2,2] [==============================&gt;----------------------------------------------------] 38% est: 1s ## plot: [2,3] [===================================&gt;-----------------------------------------------] 44% est: 1s ## plot: [2,4] [=========================================&gt;-----------------------------------------] 50% est: 1s ## plot: [3,1] [==============================================&gt;------------------------------------] 56% est: 1s ## plot: [3,2] [===================================================&gt;-------------------------------] 62% est: 0s ## plot: [3,3] [========================================================&gt;--------------------------] 69% est: 0s ## plot: [3,4] [=============================================================&gt;---------------------] 75% est: 0s ## plot: [4,1] [==================================================================&gt;----------------] 81% est: 0s ## plot: [4,2] [========================================================================&gt;----------] 88% est: 0s ## plot: [4,3] [=============================================================================&gt;-----] 94% est: 0s ## plot: [4,4] [===================================================================================]100% est: 0s "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
